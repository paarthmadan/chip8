pub struct Display {
    lcd: [[u8; 64]; 32]
}

impl Display {
    pub const DIGIT_SPRITES: [u8; 5*16] = [
        0xF0, 0x90, 0x90, 0x90, 0xF0,
        0x20, 0x60, 0x20, 0x20, 0x70,
        0xF0, 0x10, 0xF0, 0x80, 0xF0,
        0xF0, 0x10, 0xF0, 0x10, 0xF0,
        0x90, 0x90, 0xF0, 0x10, 0x10,
        0xF0, 0x80, 0xF0, 0x10, 0xF0,
        0xF0, 0x80, 0xF0, 0x90, 0xF0,
        0xF0, 0x10, 0x20, 0x40, 0x40,
        0xF0, 0x90, 0xF0, 0x90, 0xF0,
        0xF0, 0x90, 0xF0, 0x10, 0xF0,
        0xF0, 0x90, 0xF0, 0x90, 0x90,
        0xE0, 0x90, 0xE0, 0x90, 0xE0,
        0xF0, 0x80, 0x80, 0x80, 0xF0,
        0xE0, 0x90, 0x90, 0x90, 0xE0,
        0xF0, 0x80, 0xF0, 0x80, 0xF0,
        0xF0, 0x80, 0xF0, 0x80, 0x80,
    ];

    pub fn dump(&self) {
        for row in &self.lcd {
            for c in row.iter() {
                print!("{}", c);
            }
            println!("");
        }
        println!("");
    }

    pub fn write(&mut self, x: u8, y: u8, sprite: &Vec<u8>) {
        for (i, row) in sprite.iter().enumerate() {
            for x_offset in 0..=7 {
                let px = (x + x_offset) % 64;
                let py = (y + i as u8) % 32;
                self.lcd[py as usize][px as usize] = 0x01 & (row >> (7 - (x_offset)))
            }
        }
    }

    pub fn clear(&mut self) {
        self.lcd = [[0; 64]; 32];
    }
}

impl Default for Display {
    fn default() -> Self {
        Display { lcd: [[0; 64]; 32] }
    }
}
